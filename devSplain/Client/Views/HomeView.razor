@page "/"
@using devSplain.Shared.Data
@using devSplain.Shared.Models
@inject IJSRuntime JSRuntime
@inject PostDataStoreSingleton _posts
@inject HttpClient _http

<div class="bd-example">
    <div id="homeCarousel" class="carousel slide" data-ride="carousel">
        @*<ol class="carousel-indicators">
            <li data-target="#homeCarouselCaptions" data-slide-to="0" class="active"></li>
            <li data-target="#homeCarouselCaptions" data-slide-to="1"></li>
            <li data-target="#homeCarouselCaptions" data-slide-to="2"></li>
        </ol>*@
        <div class="carousel-inner">
            <div class="carousel-item active">
                <img src="Images/1.png" class="d-block w-100 rounded">
            </div>
            <div class="carousel-item">
                <img src="Images/2.png" class="d-block w-100 rounded">
            </div>
            <div class="carousel-item">
                <img src="Images/3.png" class="d-block w-100 rounded">
            </div>
        </div>
@*        <a class="carousel-control-prev" href="#homeCarouselCaptions" role="button" data-slide="prev">
            <span class="carousel-control-prev-icon" aria-hidden="true"></span>
            <span class="sr-only">Previous</span>
        </a>
        <a class="carousel-control-next" href="#homeCarouselCaptions" role="button" data-slide="next">
            <span class="carousel-control-next-icon" aria-hidden="true"></span>
            <span class="sr-only">Next</span>
        </a>*@
    </div>
</div>
<br />
<br />

<div class="container-fluid">
    <div class="row">
        <div class="col-lg">
             <div class="card bg-dark w-100">
                 <a class="card-block stretched-link text-decoration-none" href="/tutorials">
                     <div class="card-body">
                         <h3 class="h3 text-white text-center">Featured Tutorial</h3>
                         <img class="card-img-bottom" src="Images/tutorial.png" />
                     </div>
                 </a>
            </div>
        </div>
        <div class="col-lg">
             <div class="card bg-dark w-100">
                 <a class="card-block stretched-link text-decoration-none" href="/articles">
                     <div class="card-body">
                         <h3 class="h3 text-white text-center">Featured Article</h3>
                         <img class="card-img-bottom" src="Images/book.png" />
                     </div>
                 </a>
            </div>
        </div>
        <div class="col-lg">
            @*<div class="grid-container">
                <div class="grid-item" style="grid-area: span 5 / span 3;"><img src="Images/wrapper.png" width="350"></div>
                <div class="grid-item"><h3 class="h3 text-white text-center">Recent Articles</h3></div>
            </div>*@
             <div class="card w-100 h-100" style="background-color: #ffa114">
                 <div class="card-body">
                     <h3 class="h3 text-white text-center">Recent Articles</h3>
                         <RadzenDataGrid Count="7" Data="@_posts.PostsList" Style="background-color: transparent"  AllowSorting="false" AllowFiltering="false" AllowPaging="false" PageSize="7"
                                    TItem="PostModel" SelectionMode="DataGridSelectionMode.Single" @bind-Value=@selectedPost>
                            <Columns>
                                <RadzenDataGridColumn TItem="PostModel" Property="Title" Filterable="false" Frozen="true" Width="80px" TextAlign="TextAlign.Left" />
                                @*<RadzenDataGridColumn TItem="PostModel" Title="Image" Sortable="false" Filterable="false" Width="80px">
                                    <Template Context="data">
                                        @if (string.IsNullOrEmpty(data.BlobURL))
                                        {
                                            <RadzenImage src="Images/default-avatar.png" alt="Image" style="width: 40px; height: 40px; border-radius: 8px;" />
                                        }
                                        else
                                        {
                                            try
                                            {
                                                <RadzenImage Path="" style="width: 40px; height: 40px; border-radius: 8px;" />
                                            }
                                            catch (Exception ex)
                                            {
                                                Log.Error("Error: {0}", ex);
                                            }
                                        }
                                    </Template>
                                </RadzenDataGridColumn>*@
                                <RadzenDataGridColumn TItem="PostModel" Property="CreatedOn" Width="50px"/>
                            </Columns>
                        </RadzenDataGrid>
                 </div>
            </div>
        </div>
    </div>
</div>
<br />
<br />

@code {
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JSRuntime.InvokeVoidAsync("startCarousels");
    }

    IList<PostModel> selectedPost;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _posts.PostsList = await _http.GetFromJsonAsync<List<PostModel>>($"api/Post/GetAll");
        }
        catch (Exception ex)
        {
            Log.Error("ERROR: {0}", ex);
        }

    }


}
