@page "/articles"

@using devSplain.Shared.Data
@using devSplain.Shared.Models
@inject IJSRuntime JSRuntime
@inject PostDataStoreSingleton _posts
@inject HttpClient _http

<div class="bd-example">
    <div id="homeCarousel" class="carousel slide" data-ride="carousel">
@*        <ol class="carousel-indicators">
            <li data-target="#homeCarouselCaptions" data-slide-to="0" class="active"></li>
            <li data-target="#homeCarouselCaptions" data-slide-to="1"></li>
            <li data-target="#homeCarouselCaptions" data-slide-to="2"></li>
        </ol>*@
        <div class="carousel-inner">
            <div class="carousel-item active">
                <img src="Images/1.png" class="d-block w-100 rounded">
            </div>
            <div class="carousel-item">
                <img src="Images/2.png" class="d-block w-100 rounded">
            </div>
            <div class="carousel-item">
                <img src="Images/3.png" class="d-block w-100 rounded">
            </div>
        </div>
@*        <a class="carousel-control-prev" href="#homeCarouselCaptions" role="button" data-slide="prev">
            <span class="carousel-control-prev-icon" aria-hidden="true"></span>
            <span class="sr-only">Previous</span>
        </a>
        <a class="carousel-control-next" href="#homeCarouselCaptions" role="button" data-slide="next">
            <span class="carousel-control-next-icon" aria-hidden="true"></span>
            <span class="sr-only">Next</span>
        </a>*@
    </div>
</div>
<br />
<br />

<div class="container-fluid">
    
    @if (articles.Count() != 0)
    {
        int i = 0;
        @while (i < articles.Count())
        {
            <br />
            <div class="row">
            @try 
            {
                @for (int j = 0; j < 3; j++)
                {
                    if (i < articles.Count())
                    {
                        <div class="col-lg">
                            <div class="card bg-dark w-100">
                                <a class="card-block stretched-link text-decoration-none" href="/article/@articles[i].PostId">
                                    <div class="card-body">
                                        <!-- Grab posts labeled article and order by date -->
                                        <h3 class="h3 text-white text-center">@articles[i].Title</h3>
                                        @if (articles[i].Text.Count() > 200)
                                        {
                                            <p>@articles[i].Text.Substring(0, 200)</p>
                                        }
                                        else
                                        {
                                            <p>@articles[i].Text</p>
                                        }
                                    </div>
                                </a>
                            </div>
                        </div>
                        i++;
                    }
                }
            } 
            catch (Exception ex)
            {
                Log.Information("No more items in post list: {0}", ex);
            }
            </div>
        }
    }
</div>
<br />
<br />

@code {
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JSRuntime.InvokeVoidAsync("startCarousels");
    }

    IList<PostModel> selectedPost;

    IList<PostModel> articles;

    protected override async Task OnInitializedAsync()
    {
        Log.Information("Initializing Article Feed View.");

        // Add a datetime singleton that checks the database for new data every 5-10 minutes
        // after the first launch of this page
        _posts.PostsList = await _http.GetFromJsonAsync<List<PostModel>>($"api/Post/GetAll");

        // Grab only Posts labeled article in the post singleton
        articles =  _posts.PostsList.FindAll(c => c.Type == "article");
    }

}
